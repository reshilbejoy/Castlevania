Project 3
-------------------------------------------------------------------------------

Castlevania

Contributor Code Docu Asst Adj. Score
----------- ---- ---- ---- ---- -----
Rushil       582   42   7    +0 20/20 A
Teja         638   10   1    +0 20/20 A
Reshil       533        1    +0 20/20 A
Sofiya       858       36    +0 20/20 A

-------------------------------------------------------------------------------

Rubric:
1. Baseline:   15
2. Creativity: +1.5     fun story, physics
3. Design:     +2       nice custom graphics and sound
4. Clean code: +0.5     generally good, but see comments below
5. Document:   +1       detailed description, good retrospective
   Total:      20

-------------------------------------------------------------------------------

Comments:

* Great job overall. You ended up with a game that is fun, original, and
  looks good. Gameplay feels very much like a real 80s game.

* The work you put into the original graphics and sound is over the top.
  Definitely gives the game a feeling of freshness.

* Your code is generally easy to read, but you have some embarrassingly long
  functions.

* I really like the way you used ASCII files to define your levels. Very easy
  to manage.

* Issues: 38 created. Looks like you made use of issues, but not yet at a very
  granual level, and no commits are tagged.

-------------------------------------------------------------------------------

Generic fine print:
a. "Code" shows the approximate lines of code contributed. This is just a line
   count of "git blame" and shouldn't be taken too seriously. Still, in many
   cases it gives quick sniff test of who did how much work.
b. "Docu" is the same thing applied to the documentation if it is in markdown.
c. "Asst" is an approximate count of the non-code assets contributed, e.g.
   images and sounds.
d. "Adj." is a credit adjustment for contributors who did significantly more or
   less than than average contributor. Credit adjustments sum to 0.
e. "Score" is the final score, taken by adding the lines from the rubric and
   the credit adjustment. Score is capped at 20/20.

1. "Baseline" means all requirements are met. This gives you a C if it's all you
   have.
2. "Creativity" is a measure of how much tought and energy you put into going
   beyond the minimum requirements.
   Points can be deducted here if some requirements are missing.
3. "Design" gives extra points for the look of the UI and overall usability.
   Points can be deducted here if there are errors or crashes.
4. "Clean code" indicates how easy the code is to read. Good code consists of
   short functions with clear names, organized in a coherent way.
   Points can be deducted here if code is redundant or especially messy.
5. "Document" gives extra points if the documentation is especially clear or
   comprehensive.
   Points can be deducted here if the documentation is missing or insufficient.
